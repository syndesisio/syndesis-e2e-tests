package io.syndesis.qe.rest.tests.integrations;

import static org.junit.Assert.assertThat;

import static org.hamcrest.Matchers.is;
import static org.hamcrest.Matchers.notNullValue;

import static io.syndesis.qe.rest.utils.Utils.findAction;
import static io.syndesis.qe.rest.utils.Utils.map;

import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.JsonNodeType;
import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.FileVisitResult;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.SimpleFileVisitor;
import java.nio.file.attribute.BasicFileAttributes;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Properties;

import io.syndesis.connector.catalog.ConnectorCatalog;
import io.syndesis.connector.catalog.ConnectorCatalogProperties;
import io.syndesis.core.MavenProperties;
import io.syndesis.dao.init.ModelData;
import io.syndesis.dao.init.ReadApiClientData;
import io.syndesis.model.Kind;
import io.syndesis.model.connection.Connection;
import io.syndesis.model.connection.Connector;
import io.syndesis.model.integration.Integration;
import io.syndesis.model.integration.SimpleStep;
import io.syndesis.model.integration.Step;
import io.syndesis.project.converter.DefaultProjectGenerator;
import io.syndesis.project.converter.GenerateProjectRequest;
import io.syndesis.project.converter.ProjectGeneratorProperties;
import io.syndesis.project.converter.ProjectGeneratorProperties.Templates;
import io.syndesis.project.converter.visitor.DataMapperStepVisitor;
import io.syndesis.project.converter.visitor.EndpointStepVisitor;
import io.syndesis.project.converter.visitor.ExpressionFilterStepVisitor;
import io.syndesis.project.converter.visitor.RuleFilterStepVisitor;
import io.syndesis.project.converter.visitor.StepVisitorFactoryRegistry;
import io.syndesis.qe.rest.accounts.Account;
import io.syndesis.qe.rest.accounts.AccountsDirectory;
import io.syndesis.qe.rest.utils.SyndesisRestConstants;
import lombok.extern.slf4j.Slf4j;

/**
 * <p>
 * This test verifies integration projects generated by syndesis.</p>
 *
 * <p>
 * This tests doesn't call syndesis using REST, so it doesn't require running syndesis instance. Instead it just
 * instantiate project generator and generate a project by itself. </p>
 *
 * @author jknetl
 */
@Slf4j
public class ProjectGeneratorTest {

	private static Connector twitterConnector;
	private static Connector salesforceConnector;
	private static AccountsDirectory accountsDirectory;
	private VersionsDirectory versions;
	private static MavenProperties mavenProperties = new MavenProperties(map("maven.central", "https://repo1.maven.org/maven2",
			"redhat.ga", "https://maven.repository.redhat.com/ga",
			"jboss.ea", "https://repository.jboss.org/nexus/content/groups/ea"));
	private static String basePath;
	private static List<Templates.Resource> additionalResources = new ArrayList<>();
	private static Path tarPath;

	private class VersionsDirectory {

		private Properties versions;

		VersionsDirectory(Path path) {
			try (InputStream inStream = Files.newInputStream(path)) {
				versions = new Properties();
				versions.load(inStream);
			} catch (IOException e) {
				throw new RuntimeException("Cannot load dependency versions from file " + path, e);
			}
		}

		public Optional<String> getVersion(String artifact) {
			return Optional.ofNullable(versions.getProperty(artifact));
		}
	}

	static {
		System.setProperty("groovy.grape.report.downloads", "true");
		System.setProperty("ivy.message.logger.level", "3");
	}

	private static Map<String, Connector> connectors = new HashMap<>();

	private static final StepVisitorFactoryRegistry registry = new StepVisitorFactoryRegistry(
			Arrays.asList(new DataMapperStepVisitor.Factory(),
					new EndpointStepVisitor.Factory(),
					new RuleFilterStepVisitor.Factory(),
					new ExpressionFilterStepVisitor.Factory()
			));

	@BeforeClass
	public static void beforeClass() throws IOException {
		accountsDirectory = new AccountsDirectory(Paths.get(SyndesisRestConstants.ACCOUNT_CONFIG_PATH));
		tarPath = createTwitterToSalesforceIntegration();
	}

	@AfterClass
	public static void tearDown() throws Exception {
		if (tarPath != null) {
			Files.walkFileTree(tarPath, new SimpleFileVisitor<Path>() {
				@Override
				public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
					Files.delete(file);
					return FileVisitResult.CONTINUE;
				}

				@Override
				public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {
					Files.delete(dir);
					return FileVisitResult.CONTINUE;
				}
			});
		}
	}

	@Test
	public void testFilesPresent() {

		assertThat(tarPath.resolve("pom.xml"), notNullValue());
		assertThat(tarPath.resolve("README.md"), notNullValue());
		assertThat(tarPath.resolve("src/main/java/io/syndesis/example/Application.java"), notNullValue());
		assertThat(tarPath.resolve("src/main/resources/application.properties"), notNullValue());
		assertThat(tarPath.resolve("src/main/resources/mapping-step-2.json"), notNullValue());
		assertThat(tarPath.resolve("src/main/resources/syndesis.yml"), notNullValue());
	}

	@Test
	public void testIntegrationYaml() throws IOException {

		final ObjectMapper yamlMapper = new ObjectMapper(new YAMLFactory());
		final JsonNode root = yamlMapper.readTree(tarPath.resolve("src/main/resources/syndesis.yml").toFile());
		final JsonNode flows = root.get("flows");
		assertThat(flows, notNullValue());
		assertThat(flows.getNodeType(), is(JsonNodeType.ARRAY));

		assertThat(flows.size(), is(1));
		final JsonNode steps = flows.get(0).get("steps");
		assertThat(steps, notNullValue());

		assertThat(steps.size(), is(3));
		final JsonNode twitterStep = steps.get(0);
		final JsonNode mapperStep = steps.get(1);
		final JsonNode salesforceStep = steps.get(2);

		assertThat(twitterStep.get("kind").asText(), is("endpoint"));
		assertThat(twitterStep.get("uri").asText(), is("twitter-mention-connector:MENTIONS"));

		assertThat(mapperStep.get("kind").asText(), is("endpoint"));
		assertThat(mapperStep.get("uri").asText(), is("atlas:mapping-step-2.json"));

		assertThat(salesforceStep.get("kind").asText(), is("endpoint"));
		assertThat(salesforceStep.get("uri").asText(), is("salesforce-upsert-sobject"));
	}

	@Test
	public void testDependencyVersions() throws ParserConfigurationException, IOException, SAXException {
		versions = new VersionsDirectory(Paths.get(SyndesisRestConstants.VERSIONS_CONFIG_PATH));

		final File pomFile = tarPath.resolve("pom.xml").toFile();
		assertThat(pomFile, notNullValue());

		// verify correct versions
		final DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
		final DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
		try (FileInputStream is = new FileInputStream(pomFile)) {
			final Document doc = dBuilder.parse(is);
			final Node properties = getChild(doc.getDocumentElement(), "properties").get();

			assertThat(getChild(properties, "spring-boot.version").get().getTextContent(), is(versions.getVersion("spring-boot").get()));
			assertThat(getChild(properties, "camel.version").get().getTextContent(), is(versions.getVersion("camel").get()));
			assertThat(getChild(properties, "camel-atlasmap.version").get().getTextContent(), is(versions.getVersion("camel-atlasmap").get()));
			assertThat(getChild(properties, "syndesis-integration-runtime.version").get().getTextContent(), is(versions.getVersion("syndesis-integration-runtime").get()));
		}
	}

	private static Path createTwitterToSalesforceIntegration() throws IOException {
		final List<ModelData<?>> modelDataList = new ReadApiClientData().readDataFromFile("io/syndesis/dao/deployment.json");
		for (ModelData<?> md : modelDataList) {
			if (md.getKind() == Kind.Connector) {
				final Connector connector = (Connector) md.getData();
				connectors.put(connector.getId().get(), connector);
			}
		}

		twitterConnector = connectors.get("twitter");
		salesforceConnector = connectors.get("salesforce");
		String mapping = null;
		mapping = new String(Files.readAllBytes(Paths.get("./target/test-classes/mappings/twitter-salesforce.json")));
		final Account twitterAccount = accountsDirectory.getAccount("twitter_listen").get();

		final Step twitterStep = new SimpleStep.Builder()
				.stepKind("endpoint")
				.connection(new Connection.Builder()
						.connector(twitterConnector)
						.connectorId(twitterConnector.getId())
						.configuredProperties(map("accessToken", twitterAccount.getProperty("accessToken"),
								"accessTokenSecret", twitterAccount.getProperty("accessTokenSecret"),
								"consumerKey", twitterAccount.getProperty("consumerKey"),
								"consumerSecret", twitterAccount.getProperty("consumerSecret")))
						.name("Fuse QE twitter")
						.build())
				.action(findAction(twitterConnector, "twitter-mention-connector"))
				.build();

		final Step mapperStep = new SimpleStep.Builder()
				.stepKind("mapper")
				.configuredProperties(map("atlasmapping", mapping))
				.build();

		final Account salesforceAccount = accountsDirectory.getAccount("salesforce").get();
		final Step salesforceStep = new SimpleStep.Builder()
				.stepKind("endpoint")
				.connection(new Connection.Builder()
						.connector(salesforceConnector)
						.connectorId(salesforceConnector.getId())
						.configuredProperties(map("clientId", salesforceAccount.getProperty("clientId"),
								"clientSecret", salesforceAccount.getProperty("clientSecret"),
								"instanceUrl", salesforceAccount.getProperty("instanceUrl"),
								"loginUrl", salesforceAccount.getProperty("loginUrl"),
								"userName", salesforceAccount.getProperty("userName"),
								"password", salesforceAccount.getProperty("password")))
						.name("Fuse QE salesforce")
						.build())
				.action(findAction(salesforceConnector, "salesforce-upsert-sobject"))
				.build();

		final GenerateProjectRequest request = new GenerateProjectRequest.Builder()
				.integration(new Integration.Builder()
						.id("test-integration")
						.name("Test Integration")
						.description("This is a test integration!")
						.steps(Arrays.asList(twitterStep, mapperStep, salesforceStep))
						.build())
				.connectors(connectors)
				.build();

		final ProjectGeneratorProperties generatorProperties = new ProjectGeneratorProperties(mavenProperties);
		generatorProperties.getTemplates().setOverridePath(basePath);
		generatorProperties.getTemplates().getAdditionalResources().addAll(additionalResources);
		generatorProperties.setSecretMaskingEnabled(true);

		final Path runtimeDir = generate(request, generatorProperties);

		return runtimeDir;
	}

	private static Path generate(GenerateProjectRequest request, ProjectGeneratorProperties generatorProperties) throws IOException {
		try (InputStream is = new DefaultProjectGenerator(new ConnectorCatalog(new ConnectorCatalogProperties(mavenProperties)),
				generatorProperties, registry).generate(request)) {
			final Path ret = Files.createTempDirectory("integration-runtime");
			try (TarArchiveInputStream tis = new TarArchiveInputStream(is)) {

				TarArchiveEntry tarEntry = tis.getNextTarEntry();
				// tarIn is a TarArchiveInputStream
				while (tarEntry != null) { // create a file with the same name as the tarEntry
					final File destPath = new File(ret.toFile(), tarEntry.getName());
					if (tarEntry.isDirectory()) {
						destPath.mkdirs();
					} else {
						destPath.getParentFile().mkdirs();
						destPath.createNewFile();
						final byte[] btoRead = new byte[8129];
						BufferedOutputStream bout = new BufferedOutputStream(new FileOutputStream(destPath));
						int len = tis.read(btoRead);
						while (len != -1) {
							bout.write(btoRead, 0, len);
							len = tis.read(btoRead);
						}
						bout.close();
					}
					tarEntry = tis.getNextTarEntry();
				}
			}
			return ret;
		}
	}

	/**
	 * @param parent a parent node
	 * @param childName name of the expected children
	 * @return first child node with a given name or Empty if no such child has been found
	 */
	private Optional<Node> getChild(Node parent, String childName) {
		final NodeList list = parent.getChildNodes();
		Node result = null;
		for (int i = 0; i < list.getLength(); i++) {
			final Node child = list.item(i);
			if (childName.equals(child.getNodeName())) {
				result = child;
				break;
			}
		}

		return Optional.ofNullable(result);
	}
}
