apiVersion: v1
kind: Template
labels:
  template: wildfly
metadata:
  name: "wildfly-s2i-template"
objects:
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        app: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      source:
        git:
          uri: ${GITHUB_REPO}
        type: Git
      strategy:
        sourceStrategy:
          from:
            kind: ImageStreamTag
            name: wildfly-130-centos7:latest
        type: Source
      triggers:
        - generic:
            secret: secret
          type: Generic
        - imageChange: {}
          type: ImageChange
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        app: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      tags:
        - items:
            name: latest
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
        - name: "8080"
          port: 8080
          targetPort: 8080
      selector:
        deploymentconfig: ${APPLICATION_NAME}
      sessionAffinity: None
      type: ClusterIP
  - apiVersion: v1
    kind: Route
    metadata:
      labels:
        app: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      host: ${APPLICATION_NAME}-syndesis.my-minishift.syndesis.io
      port:
        targetPort: "8080"
      to:
        kind: Service
        name: ${APPLICATION_NAME}
        weight: 100
      wildcardPolicy: None
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        deploymentconfig: ${APPLICATION_NAME}
      strategy:
        type: Rolling
        rollingParams:
          intervalSeconds: 1
          maxSurge: 25%
          maxUnavailable: 25%
          timeoutSeconds: 600
          updatePeriodSeconds: 1
      template:
        metadata:
          labels:
            deploymentconfig: ${APPLICATION_NAME}
        spec:
          containers:
            - image: ${APPLICATION_NAME}
              imagePullPolicy: Always
              name: ${APPLICATION_NAME}
              ports:
                - containerPort: 8080
              resources: {}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
      test: false
      triggers:
        - type: ConfigChange
        - imageChangeParams:
            automatic: true
            containerNames:
              - ${APPLICATION_NAME}
            from:
              kind: ImageStreamTag
              name: ${APPLICATION_NAME}:latest
          type: ImageChange
parameters:
  - name: APPLICATION_NAME
    description: The name of the application
    required: true
  - name: GITHUB_REPO
    description: The URL of GitHub repository to build and deploy
    required: true